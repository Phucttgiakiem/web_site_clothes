@model IEnumerable<Website_clothe.Models.Loai>
@{ 
    var item1 = ViewBag.size;
    
    var item3 = ViewBag.thuonghieu;
}

<div class="container-filter col-2">
    <p>Bộ lọc</p>
    <div class="choosehistory">
        <p>Đã chọn</p>
        <div id="main-chhis">

        </div>
    </div>
    <div class="sidebar_type_and_size d-flex flex-column">
        @if (Model != null && Model.Any())
        {
            foreach(var item in Model){
                <div>
                    <a style="text-decoration:none; color:rgb(27, 27, 27); font-size:20px" href="#">@item.Tenloai</a>
                </div>
                <ul class="d-flex flex-row flex-wrap justify-content-between p-0">

                    @foreach (var sub in item1)
                    {
                        if (sub.ID_Loai == item.ID_Loai)
                        {
                            <li id="@item.ID_Loai"><a class="itemfl" href="#" >@sub.TenSize</a></li>
                        }

                    }
                </ul>
            }
        }
    </div>
    <div class="order_sidebar d-flex flex-column">
        <div class="trademark1234 d-flex flex-column">
            <p>Thương hiệu</p>
            @foreach(var item in item3)
            {
                <a href="#">@item.Tenthuonghieu</a>
            }
        </div>
        <div class="wrapper">
            <div class="title-price">
                <p>Khoảng giá (đv: đồng)</p>
            </div>
            <div class="price-in">
                <div class="field">
                    <input type="number" class="in-min" value="0" />

                </div>
                <div class="field">
                    <input type="number" class="in-max" value="1500000" />

                </div>
            </div>
            <div class="slider_x">
                <div class="pro"></div>
            </div>
            <div class="range-in">
                <input type="range" class="range-min" min="0" max="1500000" value="0" />
                <input type="range" class="range-min" min="0" max="1500000" value="1500000" />
            </div>
        </div>
    </div>
</div>
@*<script>
    const rangein = document.querySelectorAll(".range-in input");
    const pricein = document.querySelectorAll(".price-in input");
    const progress = document.querySelector(".slider_x pro");
    let price = 1000;
    rangein.forEach(input => {
        input.addEventListener("input", e => {
            let minVal = parseInt(rangein[0].value),
                maxVal = parseInt(rangein[1].value);
            if (maxVal - minVal > price) {
                if (e.target.className === "range-min") {
                    rangein[0].value = maxVal - price;
                }
                else {
                    rangein[1].value = minVal + price;
                }
            } else {
                pricein[0].value = minVal;
                pricein[1].value = maxVal;
                progress.style.left = (minVal / rangein[0].max) * 100 + "%";
                progress.style.right = 100 - (maxVal / rangein[1].max) * 100 + "%";
            }
        })
    })
</script>*@
@*<script>
    
    
    //function valumnofprice(){
    //    const rangein = document.querySelectorAll(".range-in input");
    //    const pricein = document.querySelectorAll(".price-in input");
    //    const progress = document.querySelector(".slider_x .pro");
    //    let price = 1000;
    //    /*getvalueinchoose()*/
    //    rangein.forEach(input => {
    //        input.addEventListener("input", e => {
    //            let minVal = parseInt(rangein[0].value);
    //            let maxVal = parseInt(rangein[1].value);

    //            // Tính khoảng cách giữa hai đầu
    //            let range = maxVal - minVal;

    //            // Nếu khoảng cách nhỏ hơn hoặc bằng "price," ngăn đầu kia thay đổi giá trị
    //            if (range <= price) {
    //                if (e.target === rangein[0]) {
    //                    rangein[1].value = minVal + price;
    //                } else {
    //                    rangein[0].value = maxVal - price;
    //                }
    //            } else {
    //                pricein[0].value = minVal;
    //                pricein[1].value = maxVal;
    //                progress.style.left = (minVal / rangein[0].max) * 100 + "%";
    //                progress.style.right = 100 - (maxVal / rangein[1].max) * 100 + "%";
    //            }

    //            setTimeout(function () {
    //                var divv = document.createElement("div");
    //                divv.classList.add("h_price");
    //                var icon = document.createElement("i");
    //                icon.classList.add("fas");
    //                icon.classList.add("fa-times");
    //                icon.style.marginRight = "10px";
    //                icon.style.textAlign = "center"
    //                var p1 = document.createElement("span");
    //                p1.classList.add("text_h-price");
                   
    //                p1.textContent = minVal + " - " + maxVal;
    //                var parentElement = document.getElementById("main-chhis");
    //                parentElement.innerHTML = "";
    //                divv.appendChild(icon);
    //                divv.appendChild(p1)
    //                parentElement.appendChild(divv);
    //            }, 1000)
    //            setTimeout(Getdata(minVal, maxVal), 2000);
    //        });
    //    });
    //    function Getdata(minPrice, maxPrice) {
    //        $.ajax({
    //            url: "/product/Productwithcdtion",
    //            data: {
    //                minprice: minPrice,
    //                maxprice: maxPrice
    //            }
    //        })
    //            .done(function (response) {
    //                $(".main-product").html("");
    //                $(".main-product").html(response);
    //            })
    //    }
    //}
    
    //// hiệu ứng với thẻ size li
    //function getvalueinchoose() {
    //    var aElements = document.querySelectorAll(".itemfl");
    //    var divv = document.createElement("div");
    //    divv.classList.add("h_size");
    //    var p1 = document.createElement("span");
    //    p1.classList.add("text_h-price");
    //    var icon = document.createElement("i");
    //    icon.classList.add("fas");
    //    icon.classList.add("fa-times");
    //    icon.style.marginRight = "10px";
    //    icon.style.textAlign = "center"

    //    //tạo json thẻ size
    //    //var jsonsize = {
    //    //    key_id_size = 0,
    //    //    value_size = ""
    //    //}



    //    // Lặp qua từng thẻ a và thêm sự kiện click
    //    aElements.forEach(function (a) {
    //        var liElement = a.parentElement;
    //        var isSelected = false; // Biến để kiểm tra trạng thái đã chọn hay chưa
    //        var prent = document.getElementById("main-chhis");
    //        prent.innerHTML = "";
    //        a.addEventListener("click", function () {
    //            if (!isSelected) {
    //                // Nếu chưa được chọn, thêm lớp "selected" để thay đổi màu border
    //                liElement.style.border = "1px solid black";
    //                isSelected = true; // Đánh dấu là đã chọn
    //                p1.textContent = a.innerText;
    //                divv.appendChild(icon)
    //                divv.appendChild(p1);
    //                prent.appendChild(divv);

    //                //thêm vào json
    //                console.log(liElement.getElementById("id"));

    //            } else {
    //                // Nếu đã chọn, trở về trạng thái ban đầu
    //                liElement.style.border = "1px solid rgb(223, 223, 223)";
    //                isSelected = false; // Đánh dấu là chưa chọn
    //            }
    //        });
    //    });
    //}
    ////var selectSize = [];
    ////var selectedPriceRange = { min: 0, max: 1500000 };
    //getvalueinchoose();
    //valumnofprice();   
        
    @*var selectedConditions = {
        sizes: [],
        minPrice: 0,
        maxPrice: 1500000
    };

    function updateSelectedConditions() {
        var selectedSizes = selectedConditions.sizes.join(', ');
        var selectedPrice = selectedConditions.minPrice + ' - ' + selectedConditions.maxPrice;

        var selectedConditionsDiv = document.getElementById('main-chhis');
        selectedConditionsDiv.innerHTML = '';
        var p1 = document.createElement('p');
        p1.textContent = selectedSizes + ' | ' + selectedPrice;
        selectedConditionsDiv.appendChild(p1);
    };

    function valumnofprice() {
        const rangein = document.querySelectorAll(".range-in input");
        const pricein = document.querySelectorAll(".price-in input");
        const progress = document.querySelector(".slider_x .pro");
        let price = 1000;
        /*getvalueinchoose()*/
        rangein.forEach(input => {
            input.addEventListener("input", e => {
                let minVal = parseInt(rangein[0].value);
                let maxVal = parseInt(rangein[1].value);

                // Tính khoảng cách giữa hai đầu
                let range = maxVal - minVal;

                // Nếu khoảng cách nhỏ hơn hoặc bằng "price," ngăn đầu kia thay đổi giá trị
                if (range <= price) {
                    if (e.target === rangein[0]) {
                        rangein[1].value = minVal + price;
                    } else {
                        rangein[0].value = maxVal - price;
                    }
                } else {
                    pricein[0].value = minVal;
                    pricein[1].value = maxVal;
                    progress.style.left = (minVal / rangein[0].max) * 100 + "%";
                    progress.style.right = 100 - (maxVal / rangein[1].max) * 100 + "%";
                }
            })

            setTimeout(function () {
                var minVal = parseInt(rangein[0].value);
                var maxVal = parseInt(rangein[1].value);

                selectedConditions.minPrice = minVal;
                selectedConditions.maxPrice = maxVal;

                updateSelectedConditions();
             //   sendDataToServer();
            }, 2000);
        })
    }

    function getvalueinchoose() {
        var aElements = document.querySelectorAll('.itemfl');

        aElements.forEach(function (a) {
            var liElement = a.parentElement;

            a.addEventListener('click', function () {
                var size = a.innerText;

                if (selectedConditions.sizes.includes(size)) {
                    // Nếu size đã được chọn, bỏ nó khỏi mảng
                    var index = selectedConditions.sizes.indexOf(size);
                    selectedConditions.sizes.splice(index, 1);

                    // Reset màu viền
                    liElement.style.border = '1px solid rgb(223, 223, 223)';
                } else {
                    // Nếu size chưa được chọn, thêm nó vào mảng
                    selectedConditions.sizes.push(size);

                    // Đổi màu viền
                    liElement.style.border = '1px solid black';
                }

                updateSelectedConditions();
              //  sendDataToServer();
            });
        });
    }

    function sendDataToServer() {
        $.ajax({
            url: '/product/FilterProducts',
            type: 'POST',
            data: JSON.stringify(selectedConditions),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                // Xử lý kết quả trả về từ server (data)
                // Ví dụ: Cập nhật giao diện trang web với dữ liệu mới từ server
            }
        });
    }

    getvalueinchoose();
    valumnofprice();
</script>*@
<script>
    var selectedConditions = {
        sizes: [],
        minPrice: 0,
        maxPrice: 1500000
    };

    var isFirstLoad = true; // Biến flag

    function updateSelectedConditions() {
        var selectedSizes = selectedConditions.sizes.join(', ');
        var selectedPrice = selectedConditions.minPrice + ' - ' + selectedConditions.maxPrice;

        var selectedConditionsDiv = document.getElementById('main-chhis');
        selectedConditionsDiv.innerHTML = '';
        var p1 = document.createElement('p');
        var span1 = document.createElement("span");
        span1.className = "h_price";
        span1.textContent = selectedPrice;
        var span2 = document.createElement("span");
        span2.className = "h_size";
        span2.textContent = selectedSizes
        p1.appendChild(span1);
        p1.appendChild(span2);
        selectedConditionsDiv.appendChild(p1);
    }

    function valumnofprice() {
        const rangein = document.querySelectorAll('.range-in input');
        const pricein = document.querySelectorAll('.price-in input');
        const progress = document.querySelector('.slider_x .pro');

        let price = 1000;

        rangein.forEach(input => {
            input.addEventListener('input', e => {
                let minVal = parseInt(rangein[0].value);
                let maxVal = parseInt(rangein[1].value);
                
                // Tính khoảng cách giữa hai đầu
                let range = maxVal - minVal;

                // Nếu khoảng cách nhỏ hơn hoặc bằng "price," ngăn đầu kia thay đổi giá trị
                if (range <= price) {
                    if (e.target === rangein[0]) {
                        rangein[1].value = minVal + price;
                    } else {
                        rangein[0].value = maxVal - price;
                    }
                } else {
                    pricein[0].value = minVal;
                    pricein[1].value = maxVal;
                    progress.style.left = (minVal / rangein[0].max) * 100 + '%';
                    progress.style.right = 100 - (maxVal / rangein[1].max) * 100 + '%';
                }
                selectedConditions.minPrice = minVal;
                selectedConditions.maxPrice = maxVal;
                if (!isFirstLoad) {

                    updateSelectedConditions();
                    //  sendDataToServer();
                } else {

                    isFirstLoad = false;
                }
            });

            // Thay đổi giá trị price sau mỗi lần thay đổi
           // price = parseInt(rangein[1].value) - parseInt(rangein[0].value);
           
            
        });
    }

    function getvalueinchoose() {
        var aElements = document.querySelectorAll('.itemfl');
        var parentDiv = document.getElementById('main-chhis');
        
        
        aElements.forEach(function (a) {
            var liElement = a.parentElement;

            a.addEventListener('click', function () {
                var size = liElement.id + "-" + a.innerText;
                
                if (selectedConditions.sizes.includes(size)) {
                    // Nếu size đã được chọn, bỏ nó khỏi mảng
                    var index = selectedConditions.sizes.indexOf(size);
                    parentDiv.querySelectorAll('span').forEach((spanx) => {
                        if (spanx.textContent == index) {
                            spanx.remove();
                            
                        }
                    })
                    
                    selectedConditions.sizes.splice(index, 1);
                    
                    // Reset màu viền
                    liElement.style.border = '1px solid rgb(223, 223, 223)';
                } else {
                    // Nếu size chưa được chọn, thêm nó vào mảng
                    selectedConditions.sizes.push(size);

                    // Đổi màu viền
                    liElement.style.border = '1px solid black';
                }

               /* if (!isFirstLoad) {*/
                    updateSelectedConditions();
                  //  sendDataToServer();
               /* }*/
            });
        });
    }

    function sendDataToServer() {
        selectedConditions.minPrice = parseInt(rangein[0].value);
        selectedConditions.maxPrice = parseInt(rangein[1].value);

        $.ajax({
            url: '/product/FilterProducts',
            type: 'POST',
            data: JSON.stringify(selectedConditions),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                // Xử lý kết quả trả về từ server (data)
                // Ví dụ: Cập nhật giao diện trang web với dữ liệu mới từ server
            }
        });
    }
    valumnofprice();
    getvalueinchoose();
    
</script>
